Divergence combinators | Spencer Tipping
Licensed under the terms of the MIT source code license

These combinators are installed on the function prototype and are useful when you want to quickly indicate that one function should be called before another, but the first result returned, or
what have you. This module assumes and requires Rebase.

d.rebase (function () {
  d.init (Function.prototype, {'>': g >$> (this |$> (f >$> (_ >$> (f.apply (this, arguments), g.apply (this, arguments))))),
                               '<': g >$> (this |$> (f >$> (_ >$> (f.apply (this, arguments) |$> (result >$> (g.apply (this, arguments), result)).bind(this))))),
                               '|': g >$> (this |$> (f >$> (_ >$> (f.apply (this, arguments) || g.apply (this, arguments))))),
                               '&': g >$> (this |$> (f >$> (_ >$> (f.apply (this, arguments) && g.apply (this, arguments))))),
                              'u-': _ >$> (this |$> (f >$> (_ >$> ! f.apply(this, arguments))))});
}) ();
